# fetch_allure_owner_emails.py
# -*- coding: utf-8 -*-
"""
–ß–∏—Ç–∞–µ—Ç project_ids.csv –∏–∑ –ø–∞–ø–∫–∏ —Å–∫—Ä–∏–ø—Ç–∞, –¥–ª—è –∫–∞–∂–¥–æ–≥–æ ID –≤—ã–∑—ã–≤–∞–µ—Ç:
  GET {ALLURE_BASE_URL}/api/project/access/{projectId}/collaborator
–°—á–∏—Ç–∞–µ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞–º–∏ –∑–∞–ø–∏—Å–∏ —Å permissionSetName == "Project Owner" (—Å —É—á—ë—Ç–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞/–ø—Ä–æ–±–µ–ª–æ–≤)
–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ e-mail –≤ emails.csv.

–¢—Ä–µ–±—É–µ—Ç—Å—è: pip install requests
–ó–∞–ø—É—Å–∫: python fetch_allure_owner_emails.py
"""

import csv
import os
import re
import sys
import time
import json
from typing import List, Dict, Any, Optional

import requests # type: ignore
from urllib3.exceptions import InsecureRequestWarning # type: ignore
import urllib3 # type: ignore

# ================== –ù–ê–°–¢–†–û–ô–ö–ò ==================
ALLURE_BASE_URL = "your-endpoint-url"  # –±–µ–∑ –∑–∞–≤–µ—Ä—à–∞—é—â–µ–≥–æ /
ALLURE_TOKEN    = "your-token-here"   # –≤—Å—Ç–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω
TOKEN_TYPE      = "Api-Token"       # –∏–ª–∏ 'Bearer'

INPUT_CSV  = "project_ids.csv"
OUTPUT_CSV = "emails.csv"

# –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –ø–µ—á–∞—Ç—å –ø—Ä–∏–º–µ—Ä–æ–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–æ–≤
DEBUG_MODE         = False       # –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ—Å—Ç–∞–≤—å—Ç–µ True
DEBUG_SAMPLE_LIMIT = 2
# =================================================

# –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É SSL –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ–± —ç—Ç–æ–º (verify=False)
VERIFY = False
urllib3.disable_warnings(InsecureRequestWarning)


def read_project_ids(path: str) -> List[str]:
    """–°—á–∏—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —á–∏—Å–ª–æ–≤—ã–µ ID –∏–∑ CSV, —É–±–∏—Ä–∞–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ—Ä—è–¥–æ–∫."""
    ids: List[str] = []
    with open(path, "r", encoding="utf-8") as f:
        reader = csv.reader(f)
        for row in reader:
            if not row:
                continue
            for token in row:
                token = token.strip()
                if token.isdigit():
                    ids.append(token)
    # —É–±—Ä–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø–æ—Ä—è–¥–∫–∞
    seen = set()
    uniq = []
    for i in ids:
        if i not in seen:
            seen.add(i)
            uniq.append(i)
    return uniq


def _norm(x: Any) -> str:
    """UPPER + –ø—Ä–æ–±–µ–ª—ã/–¥–µ—Ñ–∏—Å—ã –≤ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è (Project Owner -> PROJECT_OWNER)."""
    return re.sub(r"[\s\-]+", "_", str(x or "").upper())


def is_owner(collab: Dict[str, Any]) -> bool:
    """–í–ª–∞–¥–µ–ª–µ—Ü = permissionSetName —Å–æ–¥–µ—Ä–∂–∏—Ç Project Owner (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞/–ø—Ä–æ–±–µ–ª–æ–≤)."""
    # –Ø–≤–Ω—ã–µ –±—É–ª–µ–≤—ã —Ñ–ª–∞–≥–∏ (–Ω–∞ –≤—Å—è–∫–∏–π)
    for k in ("isOwner", "owner", "projectOwner"):
        if isinstance(collab.get(k), bool) and collab[k]:
            return True

    # –ì–ª–∞–≤–Ω—ã–π –ø—Ä–∏–∑–Ω–∞–∫ ‚Äî permissionSetName
    pset_name = _norm(collab.get("permissionSetName"))
    if "PROJECT_OWNER" in pset_name or pset_name == "OWNER":
        return True

    # –†–µ–∑–µ—Ä–≤–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ (–µ—Å–ª–∏ –≤–¥—Ä—É–≥ –ø–æ–ª—è –ø–æ—è–≤—è—Ç—Å—è –≤ –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö)
    role = _norm(collab.get("role"))
    if "PROJECT_OWNER" in role or role == "OWNER":
        return True

    pr = collab.get("projectRole") or {}
    pr_name = _norm(pr.get("name"))
    if "PROJECT_OWNER" in pr_name or pr_name == "OWNER":
        return True

    access_level = _norm(collab.get("accessLevel"))
    if "PROJECT_OWNER" in access_level or access_level == "OWNER":
        return True

    return False


def _looks_like_email(val: str) -> bool:
    return bool(val) and re.match(r"^[^@\s]+@[^@\s]+\.[^@\s]+$", val) is not None


def extract_email(collab: Dict[str, Any]) -> Optional[str]:
    """–í—ã—Ç—è–Ω—É—Ç—å email. –û–Ω –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ: 'email'."""
    # –≤–µ—Ä—Ö–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å
    for key in ("email", "mail", "username", "login"):
        val = collab.get(key)
        if isinstance(val, str) and _looks_like_email(val):
            return val.strip()

    # –∑–∞–ø–∞—Å–Ω–æ–π –ø—É—Ç—å ‚Äî –≤–æ –≤–ª–æ–∂–µ–Ω–Ω–æ–º user
    user = collab.get("user") or {}
    for key in ("email", "mail", "username", "login"):
        val = user.get(key)
        if isinstance(val, str) and _looks_like_email(val):
            return val.strip()

    return None


def fetch_collaborators(project_id: str):
    """GET /api/project/access/{projectId}/collaborator"""
    url = f"{ALLURE_BASE_URL.rstrip('/')}/api/project/access/{project_id}/collaborator"
    headers = {
        "Authorization": f"{TOKEN_TYPE} {ALLURE_TOKEN}",
        "Accept": "application/json",
    }
    resp = requests.get(url, headers=headers, timeout=30, verify=VERIFY)
    resp.raise_for_status()
    data = resp.json()

    if isinstance(data, list):
        return data
    if isinstance(data, dict):
        for key in ("content", "items", "results", "data", "collaborators"):
            if isinstance(data.get(key), list):
                return data[key]
        # –µ—Å–ª–∏ –ø—Ä–∏—à—ë–ª –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç
        return [data]
    return []


def _role_label_for_stats(collab: Dict[str, Any]) -> str:
    """–î–ª—è —Å–≤–æ–¥–∫–∏ –ø–æ —Ä–æ–ª—è–º –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ permissionSetName."""
    return (
        _norm(collab.get("permissionSetName"))
        or _norm(collab.get("role"))
        or _norm((collab.get("projectRole") or {}).get("name"))
        or _norm(collab.get("accessLevel"))
        or "UNKNOWN"
    )


def main():
    here = os.path.abspath(os.path.dirname(__file__))
    input_path = os.path.join(here, INPUT_CSV)
    output_path = os.path.join(here, OUTPUT_CSV)

    if not os.path.exists(input_path):
        print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω {INPUT_CSV} —Ä—è–¥–æ–º —Å–æ —Å–∫—Ä–∏–ø—Ç–æ–º: {input_path}")
        sys.exit(1)

    project_ids = read_project_ids(input_path)
    print(f"–ù–∞–π–¥–µ–Ω–æ {len(project_ids)} projectId: {project_ids}")
    if not project_ids:
        # —Å–æ–∑–¥–∞–¥–∏–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, —á—Ç–æ–±—ã –ø–∞–π–ø–ª–∞–π–Ω—ã –Ω–µ –ø–∞–¥–∞–ª–∏
        open(output_path, "w", encoding="utf-8").close()
        sys.exit(0)

    emails = set()

    for pid in project_ids:
        print(f"\nüîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ {pid}‚Ä¶")
        try:
            collabs = fetch_collaborators(pid)
            print(f"   ‚Üí –ü–æ–ª—É—á–µ–Ω–æ –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–æ–≤: {len(collabs)}")

            if DEBUG_MODE and collabs:
                print("   ‚Ü≥ –ü—Ä–∏–º–µ—Ä(—ã) –æ–±—ä–µ–∫—Ç–æ–≤:")
                for sample in collabs[:DEBUG_SAMPLE_LIMIT]:
                    try:
                        print("     ", json.dumps(sample, ensure_ascii=False)[:800])
                    except Exception:
                        print("     ", str(sample)[:800])

            owners = [c for c in collabs if is_owner(c)]
            if not owners:
                # —Å–≤–æ–¥–∫–∞ –ø–æ —Ä–æ–ª—è–º —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º permissionSetName
                role_stats = {}
                for c in collabs:
                    label = _role_label_for_stats(c)
                    role_stats[label] = role_stats.get(label, 0) + 1
                print(f"   ‚Üí –í–ª–∞–¥–µ–ª—å—Ü–µ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –†–æ–ª–∏ –≤ –æ—Ç–≤–µ—Ç–µ: {role_stats}")
            else:
                print(f"   ‚Üí –ù–∞–π–¥–µ–Ω–æ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤: {len(owners)}")

            added = 0
            for c in owners:
                email = extract_email(c)
                if email and email not in emails:
                    emails.add(email)
                    added += 1
            print(f"   ‚Üí –î–æ–±–∞–≤–ª–µ–Ω–æ email: {added}")

        except requests.HTTPError as e:
            print(f"   ‚ùå HTTP –æ—à–∏–±–∫–∞: {e}")
        except requests.RequestException as e:
            print(f"   ‚ùå –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: {e}")
        except json.JSONDecodeError:
            print("   ‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –≤ –æ—Ç–≤–µ—Ç–µ")
        except Exception as e:
            print(f"   ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

        time.sleep(0.1)  # —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å —Å–µ—Ä–≤–µ—Ä

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    with open(output_path, "w", encoding="utf-8", newline="") as f:
        w = csv.writer(f)
        for email in sorted(emails):
            w.writerow([email])

    print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(emails)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö email'–æ–≤.")
    print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ {OUTPUT_CSV} (—Ä—è–¥–æ–º —Å–æ —Å–∫—Ä–∏–ø—Ç–æ–º)")


if __name__ == "__main__":
    main()